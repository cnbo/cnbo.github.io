<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小白聊技术</title>
  
  <subtitle>把握当下，路在脚下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-23T16:25:26.782Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cnbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>建立受欢迎的社区 【GitHub 开源贡献指南译文】</title>
    <link href="http://yoursite.com/2018/03/23/%E5%BB%BA%E7%AB%8B%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E7%A4%BE%E5%8C%BA-%E3%80%90GitHub-%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97%E8%AF%91%E6%96%87%E3%80%91/"/>
    <id>http://yoursite.com/2018/03/23/建立受欢迎的社区-【GitHub-开源贡献指南译文】/</id>
    <published>2018-03-23T15:53:45.000Z</published>
    <updated>2018-03-23T16:25:26.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建立成功的项目"><a href="#建立成功的项目" class="headerlink" title="建立成功的项目"></a>建立成功的项目</h2><p>你们已经启动了你们的项目，你们正在传播它，同时有人正在查看它。真棒！现在，你如何让他们坚持下去。</p><p>一个受欢迎的社区是对你们项目的未来和声誉的投资。如果你的项目才开始收到第一次贡献，那么你们需要尽早的给贡献者们一次积极的经历，以至于能让他们继续参与贡献。<br><a id="more"></a></p><h3 id="让大家感到受欢迎"><a href="#让大家感到受欢迎" class="headerlink" title="让大家感到受欢迎"></a>让大家感到受欢迎</h3><p>可以通过被 @MikeMcQuaid 称之为<a href="https://speakerdeck.com/mikemcquaid/the-open-source-contributor-funnel" target="_blank" rel="noopener">贡献者漏斗</a>的方法思考你们项目的社区。</p><div align="center"><img src="https://camo.githubusercontent.com/91eb3e656ec62408b61c31046362965f1ea60738/68747470733a2f2f6f70656e736f757263652e67756964652f6173736574732f696d616765732f6275696c64696e672d636f6d6d756e6974792f636f6e7472696275746f725f66756e6e656c5f6d696b656d6371756169642e706e67"></div><p>当你们建立了自己的社区，你需要考虑如何让那些处在漏斗上方的人（潜在用户）转移到漏斗下方（活跃的维护者）。你们的目标是减少贡献者们在每个阶段遇到的摩擦。当人们能够轻易的取得胜利时，他们会乐意去做更多事。</p><p>从你的文档开始：</p><ul><li><strong>让大家很容易使地用你的项目。</strong> <a href="https://github.com/liadbiz/opensource-contribute-guide-chinise/blob/master/github-open-source-guide-02.md#编写 readme" target="_blank" rel="noopener">一份友好的 README</a> 以及清晰的代码示例将让大家很简单地开始你们的项目。</li><li><strong>清楚的解释如何做贡献</strong>，使用<a href="https://github.com/liadbiz/opensource-contribute-guide-chinise/blob/master/github-open-source-guide-02.md#编写你的贡献指南" target="_blank" rel="noopener">你的 CONTRIBUTING file</a> 以及持续更新 issues。</li></ul><p>好的文档能够邀请他人参与你们项目的互动。最终，一些人会开一个 issue 或者 pull request。将这些互动视为机会，将他们转移到漏斗的下方。</p><ul><li><strong>当一些人选择了你们的项目，请对他们表示感谢！</strong>仅仅只是一次消极的经历就能让一些人不想再回来。</li><li><strong>及时回应。</strong>如果你们一个月都没有回答他们的问题，他们可能早已忘记了你们的项目。</li><li><strong>对你以后接受的所有贡献者持开放态度。</strong> 很多贡献者是从一份 bug 报告或者小的修复开始的。这里有<a href="../how-to-contribute/#what-it-means-to-contribute">很多为项目做贡献的方式</a>。让大家选择他们喜欢的方式。</li><li><strong>如果你不赞成一个贡献，</strong> 首先你需要对他们的想法表示感谢，同时 <a href="../best-practices/#learning-to-say-no">解释为什么</a>它不适合项目，如果有必要的话你可以给出相关的文档链接。</li></ul><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-0ea606fd4e9f9603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>为开源做贡献对一些人来说很简单，但对另外一些人可能就不是这样了。有很多人因为没有做正确的事而害怕叫喊，或者只是不适合。（。。。）通过允许贡献者参与一些对技术要求比底的工作（文档，web content markdown，etc），可以极大的减少你对这些情况的关注。   </p></blockquote><p>— @mikeal, <a href="https://opensource.com/life/16/5/growing-contributor-base-modern-open-source" target="_blank" rel="noopener">“Growing a contributor base in modern open source”</a></p><p>多数开源贡献者是“临时贡献者”，因为他们只是偶尔参与项目贡献。一位临时贡献者可能没有充足的时间全程跟踪你的项目，所以你们的工作是能让他们很容易地参与贡献。</p><p>鼓励其他的贡献者也是对你们项目的一种投资。当你们授权大量的粉丝做他们感兴趣的工作时，你们的压力就少了很多。</p><h3 id="记录一切"><a href="#记录一切" class="headerlink" title="记录一切"></a>记录一切</h3><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-cb535142aba00afe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>你是否参加过一个（技术）活动，你不认识在场的人，但是似乎每个人站在一个小组里像老朋友一样聊天？（。。。）现在想象下你想为一个开源项目做贡献，但是你不知道为什么或者这个是如何发生的。</p></blockquote><p>— @janl, <a href="http://writing.jan.io/2015/11/20/sustainable-open-source.html" target="_blank" rel="noopener">“Sustainable Open Source”</a></p><p>当你开始一个新项目，你会觉得保持工作的私有性是正常的。但是开源项目发开始于你在公共平台记录自己的工作进程。</p><p>当你门把事情记录下来，会有更多的人能够按照你们的方式参与每一步。你可能会得到意想不到的帮助。</p><p>书写东西不仅仅只是技术文档。任何时刻，你们有写一些东西或者私自讨论项目的冲动，请询问自己是否能将之公开。</p><p>保持项目透明的项目路线：你们期待什么类型的贡献者，如何审查贡献，或者你们为什么做某些决定。</p><p>如果你们注意到有多个用户遇到过同样的问题，那么你们应该将答案记录在 README 中。</p><p>对于经常遇到的问题，你们可以考虑发布你们的笔记或者相关的 issue。在这种情况下得到的反馈将会令你们惊讶。</p><p>记录一切也适用于你们的工作。如果你正在进行大量的更新工作，请将其放入 pull request 并标记为正在进行（WIP）。这样，可以让其他人感觉参与过早期工作。</p><h3 id="积极回应"><a href="#积极回应" class="headerlink" title="积极回应"></a>积极回应</h3><p>一旦你<a href="https://github.com/liadbiz/opensource-contribute-guide-chinise/blob/master/github-open-source-guide-03.md" target="_blank" rel="noopener">推广项目</a>，人们将会给你们反馈。他们可能会问项目是如何工作的，或者需要你们帮助开始项目。</p><p>当有人列出一条 issue，提交一个 pull request，或者询问项目的有关问题时，你们应该尽量回答他们。当你们快速地做出回应时，人们将感觉到他们参与了对话，以及他们将会更热情地参与。</p><p>如果你无法及时审查请求，请尽早确认，这样会有助于提高参与度。这里是 @tdreyno在 <a href="https://github.com/middleman/middleman/pull/1466" target="_blank" rel="noopener">Middleman</a>上如何回应一个 pull request：</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-c5a63992845ffd2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><p><a href="https://docs.google.com/presentation/d/1hsJLv1ieSqtXBzd5YZusY-mB8e1VJzaeOmh8Q4VeMio/edit#slide=id.g43d857af8_0177" target="_blank" rel="noopener">一份 Mozilla 研究发现</a> 如果贡献者在 48 小时内收到代码审查，他们会有很大的可能返回以及重复贡献。</p><p>与你们项目有关的话题也可能发生在互联网的其它地方，例如 Stack Overflow，Twitter，或者 Reddit。你门可以在像这样的一些网站设置通知，这样当有人提及你们项目时可以收到提醒。</p><h3 id="为你们的社区提供一个聚会的场所"><a href="#为你们的社区提供一个聚会的场所" class="headerlink" title="为你们的社区提供一个聚会的场所"></a>为你们的社区提供一个聚会的场所</h3><p>有两个理由可以解释为什么要给社区提供一个聚会的场所。</p><p>第一个理由是为了他们。帮助人们相互认识。有着共同兴趣的人会想要一个可以聊天的地方。同时当信息是公开的而且是适宜的时候，任何人可以阅读过去的档案以至于能够快速的追赶以及参与。</p><p>第二个理由是为了你们。如果你们没有提供一个公共的场所来谈论你们的项目，他们可能会直接与你们联系。刚开始时，回复私有来信可能对你们来说很轻松。但是经过一段时间后，尤其是如果你们的项目变得流行的时候，你们就会感到累了。不要私下和人们谈论你们的项目，而是直接指明他们去指定的公共渠道。</p><p>公共交流和指明人们开一条 issu 一样简单，而不是直接发给你们发邮件或者在你们的博客发表评论。你们也可以为了方便人们谈论你们的项目设置一个邮件列表，或者创建一个 Twitter 账号，Slack，护着 IRC 渠道。或者尝试上述的所有方式。</p><p><a href="https://github.com/kubernetes/kops#getting-involved" target="_blank" rel="noopener">Kubernetes kops</a> sets aside office hours every other week to help community members:<br><a href="https://github.com/kubernetes/kops#getting-involved" target="_blank" rel="noopener">Kubernetes kops</a> 每隔一周抽出办公时间帮助社区成员：</p><blockquote><p>Kops 每隔一周都会留出时间为社区提供帮助和指导。Kops 维护者已经同意留出时间专门与新手一起工作，帮助 PRs，以及讨论新特性。</p></blockquote><p>公开交流需要特别注意的异常有：1）安全的 issues 和 2）敏感的行为准则。你们应该为大家提供一个私下报告这些 issue 的方式。如果你们不想使用自己的个人邮箱，那么就创建一个准用邮箱。</p><h2 id="让社区成才"><a href="#让社区成才" class="headerlink" title="让社区成才"></a>让社区成才</h2><p>社区非常有能量。这种能量可能是祝福也可能是诅咒，这取决于你们如何执掌它。随着你们项目社区的成长，有办法帮助它成为一股有建设性的力量，而不是具有破坏性的。</p><h3 id="不要容忍糟糕的角色"><a href="#不要容忍糟糕的角色" class="headerlink" title="不要容忍糟糕的角色"></a>不要容忍糟糕的角色</h3><p>一些流行的项目将不可避免地回吸引来一些伤害它们的人。他们可能从一些没必要的争论开始，对一些细小的功能进行谬论，或者伤害他人。</p><p>对于那种类型的人你们必须采取零容忍的政策。如果发现较晚，那些消极的人将会社区中的其他人不舒服。他们可能会离开。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-c45327cb771f1e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><p>》事实是，拥有一个支持性社区是关键。如果没有来自我的同事，互联网上一些友好的陌生人，以及聊天渠道 IRC 的帮助，我不可能做好这些工作。（。。。）不要太少。不要找麻烦。</p><p>— @karissa, <a href="https://karissa.github.io/post/okf-de" target="_blank" rel="noopener">“How to Run a FOSS Project”</a></p><p>定期对你们项目琐碎方便的辩论，使他人，包括你们不能把注意力集中于重要的任务上。新人如果看见这样的情景，他们是不会加入你们项目的。</p><p>当你们发现社区中有消极行为时，需要公然指出来。特别说明的是，要用坚定的语气解释他们的行为为什么是不可接受的。如果这种问题继续发生，你们有必要<a href="https://github.com/cnbo/open-source-guide/blob/gh-pages/_articles/code-of-conduct.md#enforcing-your-code-of-conduct" target="_blank" rel="noopener">要求他们离开</a>。你们的<a href="https://github.com/cnbo/open-source-guide/blob/gh-pages/_articles/code-of-conduct.md" target="_blank" rel="noopener">行为准则</a>是为这些情景准备的建设性指南。</p><h3 id="知道贡献者在哪里"><a href="#知道贡献者在哪里" class="headerlink" title="知道贡献者在哪里"></a>知道贡献者在哪里</h3><p>随着你们项目的成长，好的文档只会变得越加重要。临时贡献者不可能对项目非常熟悉，通过阅读你们的文档他们能很快找到他们需要的。</p><p>在你们的 CONTRIBUTING 文件里，需要明确告诉新来的贡献者该如何开始。你们可能为了想要达到这个目的而准备一个专门的部分。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-9c68c20f60080d9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><br><br><br>在你们的 issue 列表中，bugs 标签需要适合不同类型的贡献者：例如，<a href="https://medium.com/@kentcdodds/first-timers-only-78281ea47455#.g1k01jy05" target="_blank" rel="noopener"><em>“first timers only”</em></a>, <em>“good first bug”</em>, 或者 <em>“documentation”</em>. <a href="https://github.com/librariesio/libraries.io/blob/6afea1a3354aef4672d9b3a9fc4cc308d60020c8/app/models/github_issue.rb#L8-L14" target="_blank" rel="noopener">这些标签</a>能够帮助新人快速浏览issues以及开始。<br><br>最后，使用你们的文档让人们在每一步都感到欢迎。<br><br>你们永远不会与登陆项目的大多数人互动。你们可能没有收到一些贡献，因为有些人感到害怕或者不知从和开始。即使是几个字也能阻止一些人沮丧地离开你们的项目。<br><br><br>例如，这里是<a href="https://github.com/rubinius/rubinius/" target="_blank" rel="noopener">Rubinius</a>如何开始<a href="https://github.com/rubinius/rubinius/blob/master/.github/contributing.md" target="_blank" rel="noopener">它的贡献指南</a>：<br><br>&gt; 我们想感谢你们使用 Rubinius。这个项目是一个充满爱的劳动，我们希望所有用户查找 bugs，取得性能上的提升，以及帮助完善文档。每一个贡献都是有意义的，所以感谢你们的参与。话虽如此，但我们还是要求你们遵守一些指南，这样我们就能够找到你们的 issue。<br><br>### 分享你们项目的所有权<br><br><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-b790536f8ee619ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>你们的领导者们将有不同的观点，因为这是所有健康社区都该做的！然而，你们会体会到粗暴鲁莽的做法不能得到大家的认同，反而谦虚低调的做法更容易让大家接受。</p></blockquote><p>— @sarahsharp, <a href="http://sarah.thesharps.us/2015/10/06/what-makes-a-good-community/" target="_blank" rel="noopener">“What makes a good community?”</a></p><p>当大家觉得拥有项目的所有权时，他们会乐意为项目做贡献。这并不意味着你们需要转变项目的愿景或接受你们不想要的贡献。但是你们越信任他们，他们就会越忠诚。</p><p>看你们是否能尽快地找出向社区分享所有权的方法。下面有些建议：</p><ul><li><strong>反对你们自己修复简单（非关键）的 bugs。</strong> 相反，使用它们作为招募新贡献者的机会，或者指导想要参与贡献的人。开始时可能效果不是很理想，但经过一段时间你们会得到想要的结果。例如，@michaeljoseph 要求一位贡献者提交一个 pull request 在一个<a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="noopener">Cookiecutter</a> issue 的下面，而不是自己修复它。</li></ul><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-e05d057a4fa55640.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><ul><li><p><strong>在项目中添加一个贡献者或者作者文件</strong>用于记录每一个参与贡献的人。</p></li><li><p>如果你们的社区有了一定的规模，那么<strong>发送一封信或者发表一篇博客</strong>感谢贡献者们。Rust 的<a href="https://this-week-in-rust.org/" target="_blank" rel="noopener">This Week in Rust</a>和Hoodie的<a href="http://hood.ie/blog/shoutouts-week-24.html" target="_blank" rel="noopener">Shoutouts</a>是两个非常好的示例。</p></li><li><p><strong>给每个贡献者 commit 的通道。</strong>@felixge 发现这样会使大家<a href="http://felixge.de/2013/03/11/the-pull-request-hack.html" target="_blank" rel="noopener">越发乐意斟酌他们的补丁</a>，以及他甚至发现了他在一段时间没有工作的项目的新维护者。</p></li><li><p>如果你们的项目在 GitHub 上，那么<strong>将项目从你们的个人账号转移到一个组织</strong>，以及添加至少一个备份管理员。组织能让与其他人一起工作于同一个项目变得更加容易。</p></li></ul><p>事实上很多项目只有一个或者两个做大量工作的维护者。随着你们的项目以及社区越来越大会更加容易得到帮助。</p><p>当你们不能总是发现一些人去回答问题时，你们可以释放一个信号增加其他人能接触到的机会。如果你们能尽早地开始，大家就能尽快地帮助。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-2086717d2f717c5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>你们最大的兴趣是招募喜欢你们项目以及能够做你们不能做的事的贡献者。你喜欢编码，但不喜欢回答 issues？那么让社区中能做这件事的人去做。</p></blockquote><p>— @gr2m, <a href="http://hood.ie/blog/welcoming-communities.html" target="_blank" rel="noopener">“Welcoming Communities”</a></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>在你们项目的早期，做主要的决定是件容易的事。你们想做什么就可以做什么。</p><p>随着你们的项目越加流行，会有更多的人对你们的决定有兴趣。即使你们的社区没有大量的贡献者，如果你们的项目有很多用户，你们会发现大家的重点在决策上或者增加他们的 issues。</p><p>在大多数情况下，如果你们培养了一个友好，尊重的社区并公开记录你的过程，你们的社区应该能够找到解决方案。但有时候你们遇到一个 issue，有点难以解决。</p><h3 id="建立友好的氛围"><a href="#建立友好的氛围" class="headerlink" title="建立友好的氛围"></a>建立友好的氛围</h3><p>当你们的社区正在讨论一个很难的 issue 时，气氛会很激烈。人们可能会变得愤怒或者沮丧，以及发泄在其他人或者你们身上。</p><p>作为一名维护者你们的工作是不要让这种情况出现。即使你们对话题有很强烈的观点，也要尽量站在一个主持者或者推动者的位置，而不是参与争吵以及推动自己的观点。如果有人不友好或者垄断话题，那么<a href="https://github.com/liadbiz/opensource-contribute-guide-chinise/new/master#不要容忍糟糕的角色" target="_blank" rel="noopener">立即采取行动</a>以保持有礼貌以及丰富的讨论。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-e9711e0740fcb423.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>作为一名维护者，尊重你们的贡献者非常重要。他们经常处理一些你们描述亲切的事情。</p></blockquote><p>— @kennethreitz, <a href="https://www.kennethreitz.org/essays/be-cordial-or-be-on-your-way" target="_blank" rel="noopener">“Be Cordial or Be on Your Way”</a></p><p>一些人希望你们指导他们。编写一个好的示例。你们仍然可以表达失望，不高兴或者忧虑，但得心平气和。</p><p>保持你们的酷并不容易，但是展示领导能力能促进健康的社区。互联网感谢你们。</p><h3 id="将你们的-README-视为宪法"><a href="#将你们的-README-视为宪法" class="headerlink" title="将你们的 README 视为宪法"></a>将你们的 README 视为宪法</h3><p>你们的 README <a href="../starting-a-project/#writing-a-readme">不仅仅是一组指令</a>。它也是一个谈论你们目标，产品愿景和路线的地方。<br>如果人们过分专注于辩论特定功能的优点，它可能有助于重新审视您的 README，并谈论你们的项目的更高的愿景。关注你们的 README 也会使对话变得个人化，所以你们可以进行建设性的讨论。</p><h3 id="专注过程，而不是结果"><a href="#专注过程，而不是结果" class="headerlink" title="专注过程，而不是结果"></a>专注过程，而不是结果</h3><p>一些项目用投票的方式做重要决定。虽然看上去是明智的，投票强调的是得到一个“答案”，而不是倾听以及解决每个人的顾虑。</p><p>投票会变成政治，社区成员在做感兴趣的事或者表决一个明确的方法时会感到压力。不是每个人都参与了投票，可能在你们的社区中<a href="http://ben.balter.com/2016/03/08/optimizing-for-power-users-and-edge-cases/#the-silent-majority-of-users" target="_blank" rel="noopener">保持沉默的人占了多数</a>，或者用户不知道投票这件事正在发生。</p><p>有时候，投票是必要的手段。尽你们所能强调<a href="https://en.wikipedia.org/wiki/Consensus-seeking_decision-making" target="_blank" rel="noopener">“寻求共识”</a>而不是共识。</p><p>在寻求共识的过程中，社区成员讨论主要问题，直到他们感到他们已经得到充分的意见。当仅遗留下一些无关紧要的问题时，社区需要向前迈进。“寻求共识”不能确保社区能得到一个完美的答案。而是侧重聆听和讨论。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-8576e6e91e5c45fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>Atom Issues 不存在投票系统的部分原因是因为 Atom 团队在所有情况下都不会遵循投票系统。有时我们必须选择我们认为是对的事，即使它不流行。（。。。）我能通过社区的反馈知道我能够提供什么以及做什么样的工作。</p></blockquote><p>— @lee-dohm on <a href="https://discuss.atom.io/t/prioritize-issues-feature-requests-based-on-voting-system/27642/2" target="_blank" rel="noopener">Atom’s decisionmaking process</a></p><p>即使你们不确定是否采用寻求共识的方式，作为维护者，让大家知道你们正在关注他们。让其他人知道，以及承诺解决他们的问题，这在很大程度上减少了敏感情况的发送。然后，按你说的去做。</p><p>不要为了获得决议而急于做出决定。在做一个决议之前请确保每个人已经知道以及所有的信息以及公开。</p><h3 id="将对话的重点聚焦于行动"><a href="#将对话的重点聚焦于行动" class="headerlink" title="将对话的重点聚焦于行动"></a>将对话的重点聚焦于行动</h3><p>讨论很重要，但是富有成效和没有效果的对话时有区别的。</p><p>鼓励讨论，只要它正积极地朝着解决问题的方向进行着。如果对话已经无法再进行下去，只有很少的人在参与或者大家正在讨论无关紧要的问题，这时候就该结束对话了。</p><p>允许这些对话进行下去不仅对解决问题没有帮助，而且不利于社区的健康发展。它释放了这样一个信号，表示允许或甚至鼓励这种类型的对话，它可能阻止人们提高或者解决未来的问题。</p><p>当你们或者其他人每提出一个观点时，请自问：“这如何使我们更接近一个决议？”</p><p>如果对话开始有解散的征兆，问团队：“我们下一步该做什么?”才能重新对话。</p><p>如果一个对话没有清晰的方向，没有明确的措施可以采取，或者合适的措施已经被使用，那么关掉issue并解释为什么关掉它。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-50c630ed5ed59c19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>指导一件事朝着正确的方向发展是一门艺术。它对阻止人们浪费时间或者要求他们发表有建设性的看法没有作用。（。。。）反而，你们必须为接下来的进展给出条件：给大家一个路线，跟随一个可以得到你们想要的结果的途径，这样就不像是些无用的口头行为。</p></blockquote><p>— @kfogel, <a href="http://producingoss.com/en/producingoss.html#common-pitfalls" target="_blank" rel="noopener"><em>Producing OSS</em></a></p><h3 id="挑战你们的智慧"><a href="#挑战你们的智慧" class="headerlink" title="挑战你们的智慧"></a>挑战你们的智慧</h3><p>上下文很重要。考虑谁参与讨论，以及他们如何代表社区的其他人。</p><p>社区中的每个人都为这个问题而烦恼，或者参与讨论了吗？或者只是一部分人感到困惑吗？不要仅关心活跃的声音，也请不要忘记考虑社区中保持沉默的人。</p><p>如果这个问题不代表社区的更广泛的需求，你们可能要承认只是少数人的担心。如果这是一个反复出现的issue，没有一个清晰的解决方案，那么指向他们以前讨论的话题。</p><h3 id="找出社区中的决策者"><a href="#找出社区中的决策者" class="headerlink" title="找出社区中的决策者"></a>找出社区中的决策者</h3><p>通过一个态度端正和目标清晰的对话，很多困难都是可以解决的。即使在富有成效的对话中，对于如何进行的意见也可能存在差异。在这些情况下，确定一个人或一组人，可以作为决策者。</p><p>决策者可以是项目的主要维护者，或者是大家投票选出的一个小团体。理想情况下，在你们使用 GOVERNANCE 文件之前，你们已经确定了决胜者和与之相关的事宜。</p><p>使用决策者应该是你们最后才能采取的手段。分离 issues 是一个你们社区成长和学习的机会。利用这些机会以及协同合作，尽量找出解决方案。</p><h2 id="社区是开源的❤️"><a href="#社区是开源的❤️" class="headerlink" title="社区是开源的❤️"></a>社区是开源的❤️</h2><p>健康，蓬勃的社区每周都会为开源付出大量辛勤的劳动。许多贡献者指出其他人在开源工作或不在开源工作的原因。通过学习如何建设性地利用这个权力，你们会帮助他人有一个难忘的开源体验。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;建立成功的项目&quot;&gt;&lt;a href=&quot;#建立成功的项目&quot; class=&quot;headerlink&quot; title=&quot;建立成功的项目&quot;&gt;&lt;/a&gt;建立成功的项目&lt;/h2&gt;&lt;p&gt;你们已经启动了你们的项目，你们正在传播它，同时有人正在查看它。真棒！现在，你如何让他们坚持下去。&lt;/p&gt;
&lt;p&gt;一个受欢迎的社区是对你们项目的未来和声誉的投资。如果你的项目才开始收到第一次贡献，那么你们需要尽早的给贡献者们一次积极的经历，以至于能让他们继续参与贡献。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>开启一个开源项目【GitHub 开源贡献指南译文】</title>
    <link href="http://yoursite.com/2018/03/23/%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E3%80%90GitHub-%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97%E8%AF%91%E6%96%87%E3%80%91/"/>
    <id>http://yoursite.com/2018/03/23/开启一个开源项目【GitHub-开源贡献指南译文】/</id>
    <published>2018-03-23T15:29:52.000Z</published>
    <updated>2018-03-23T15:53:09.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是开源，为什么要开源"><a href="#什么是开源，为什么要开源" class="headerlink" title="什么是开源，为什么要开源"></a>什么是开源，为什么要开源</h2><p> 那么你正准备拥抱开源吗？恭喜你，开源世界欣赏你的贡献。接下来让我们聊聊什么是开源，我们为什么要开源。<br><a id="more"></a></p><h3 id="“开源”意味着什么？"><a href="#“开源”意味着什么？" class="headerlink" title="“开源”意味着什么？"></a>“开源”意味着什么？</h3><p>当一个项目开源后，意味着 <strong>不论什么目的，所有人都可以浏览，使用，修改和分发你的项目。</strong> 这些权限都是来自于<a href="https://opensource.org/licenses" target="_blank" rel="noopener">开源协议</a>.</p><p>开源非常的强大。因为它降低了使用的门槛，使新奇的思想得到快速的传播。</p><p>来理解它如何工作，想象下你的朋友正在吃便当，这时你带来了樱桃派。</p><ul><li>每个人都会想要樱桃派（使用）</li><li>这个派引起了一场轰动！周围的人会想知道你的烹饪方法（浏览）</li><li>有一位朋友 Alex 是一名糕点师，他会建议少放一点糖（修改）</li><li>另外一位朋友 Lisa 要求使用它作为下个星期的晚餐（分发）</li></ul><p>同样的，闭源就像是你去餐厅必须付钱才能吃樱桃派。但是，餐厅不会告诉你樱桃派的烹饪方法。如果你恰好抄袭了他们的派，并以你自己的名义出售，那么餐厅将会采取行动抵制你。</p><h3 id="人们为什么要将他们的工作开源？"><a href="#人们为什么要将他们的工作开源？" class="headerlink" title="人们为什么要将他们的工作开源？"></a>人们为什么要将他们的工作开源？</h3><p><span></span></p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/2180894-9a02cd2b2fcd5579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><br></div>         <blockquote><p>我从开源使用和协作中获得的最有价值的经验之一来自我与其他面临许多相同问题的开发者建立的关系。  </p></blockquote><p>— @kentcdodds, <a href="https://medium.com/@kentcdodds/how-getting-into-open-source-has-been-awesome-for-me-8480cd756a80#.pjt9oqp4w" target="_blank" rel="noopener"> “How getting into Open Source has been awesome for me”</a></p><p><a href="http://ben.balter.com/2015/11/23/why-open-source/" target="_blank" rel="noopener">这里列举了很多理由</a> 来解释为什么个人或者组织想要开源自己的项目。下面列举了部分：</p><ul><li><p><strong>协作:</strong> 开源项目欢迎所有人参与。例如， <a href="https://github.com/exercism/" target="_blank" rel="noopener">Exercism</a>是一个有超过 350 人协作开发的练习编程的平台。</p></li><li><p><strong>采用和重新混合:</strong><br>任何人可以出于几乎任何目的使用开源项目。人们甚至可以将开源项目用于构建其他的项目。例如， <a href="https://github.com/WordPress" target="_blank" rel="noopener">WordPress</a>是基于开源项目 <a href="https://github.com/WordPress/book/blob/master/Content/Part%201/2-b2-cafelog.md" target="_blank" rel="noopener">b2</a>构建的。</p></li><li><p><strong>透明度:</strong> 所有人都可以检查开源项目中存在的问题。透明度对于政府（如 <a href="https://medium.com/@bozhobg/bulgaria-got-a-law-requiring-open-source-98bf626cf70a" target="_blank" rel="noopener">保加利亚</a> 或者 <a href="https://sourcecode.cio.gov/" target="_blank" rel="noopener">美国</a>）, 产业调整（如银行业或者医疗健康行业）, 和软件安全（如 <a href="https://github.com/letsencrypt" target="_blank" rel="noopener">Let’s Encrypt</a>）。</p><p>不仅仅是可以开源软件，你可以开源一切，从数据集到书籍。通过浏览 <a href="https://github.com/explore" target="_blank" rel="noopener">GitHub Explore</a> 你可以知道什么东西可以被开源。</p></li></ul><h3 id="开源是否意味着免费"><a href="#开源是否意味着免费" class="headerlink" title="开源是否意味着免费?"></a>开源是否意味着免费?</h3><p>开源最吸引之处就是它不用花钱。然而免费只是开源的价值的一个副产品。</p><p>因为 <a href="https://opensource.org/osd-annotated" target="_blank" rel="noopener">开源协议要求</a>开源项目可以被任何人出于几乎任何目的使用，修改和分享，这些项目一般都是免费的。如果有些开源项目需要付费使用，任何人都可以合法地使用其免费版。</p><p>结果是大多数开源项目都是免费的。但免费并不属于开源定义的一部分。开源项目可以通过双重许可协议或者其它的方法进行间接收费，同时不违背开源的官方定义。</p><h2 id="我应该发起属于自己的开源项目吗"><a href="#我应该发起属于自己的开源项目吗" class="headerlink" title="我应该发起属于自己的开源项目吗?"></a>我应该发起属于自己的开源项目吗?</h2><p>答案是肯定的，因为不论结果是什么，发起一个属于自己的开源项目是学习开源最好的方法。</p><p>如果你还没有开源过一个项目，你可能会因为没有人关注或者别人的说辞而紧张。如果真是这样的话，你并不孤独！</p><p>开源与其他有创意的活动是一样的，无论是写作还是画画。你可能会害怕向世界分享你的工作，但练习是唯一让你变得更好的方法，即使你没有一位听众。</p><p>如果你不确信，那么请花一点时间想想你的目标可能是什么。</p><h3 id="设定你的目标"><a href="#设定你的目标" class="headerlink" title="设定你的目标"></a>设定你的目标</h3><p>目标可以帮助你知道该做什么，不因该说什么和需要从他人那里获得哪些帮助。请开始问自己，<em>我为什么要开源这个项目？</em></p><p>这个问题没有一个正确的答案。你可能为一个简单的项目设定了多个目标，或者不同的项目有不同的目标。</p><p>如果你唯一的目的是炫耀你的工作，你可能甚至不想将它贡献出去，甚至不会在 README 中说明。另一方面，如果你想贡献自己的项目，你将会花更多的时间在书写简洁明了的文档上，使新来的参与者感到欢迎。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-97c23555e114a6bd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div>  <blockquote><p>在某一时刻，我创建了一个自定义的 UIAlertView，并且决定开源。因此我对进行了一些修改使其更加动态灵活，同时上传到 GitHub。我编写了一份技术文档以便其他开发者将 UIAlertView 用于他们的项目中。或许没有人使用这个项目，因为这是一个简单的项目。但是我为自己的贡献感到开心。</p></blockquote><p>— @mavris, <a href="https://medium.com/rocknnull/self-taught-software-engineers-why-open-source-is-important-to-us-fe2a3473a576#.zhwo5krlq" target="_blank" rel="noopener">“Self-taught Software Developers: Why Open Source is important to us”</a></p><p>随着你的项目的发展，你的社区可能不仅需要你提供的代码。回复 issues，审查代码和传播你的项目在一个开源项目中都是非常重要的任务。</p><p>虽然你花费在非编码上的时间取决于项目的规模和范围，但你应准备好作为维护者来自己解决问题或者向他人寻求帮助。</p><p><strong>如果你参与了公司的开源项目，</strong> 确保你的项目拥有它所需要的内部资源。当项目启动后，你会想知道由谁负责维护和在你的社区如何分享这些任务。</p><p>如果你需要为项目的宣传，操作和维护准备一笔专用预算或者人员配置，那么尽早开始讨论。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-de1da49ca22c40ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div>  <blockquote><p>一旦你开源项目后，最重要的是你要考虑到项目周围社区的贡献和能力。你不必担心一些不是你公司的贡献者参与到项目的关键部分。</p></blockquote><p>— @captainsafia, <a href="https://writing.safia.rocks/2016/12/06/so-you-wanna-open-source-a-project-eh/" target="_blank" rel="noopener"> “So you wanna open source a project, eh?”</a></p><h3 id="为其他的项目做贡"><a href="#为其他的项目做贡" class="headerlink" title="为其他的项目做贡"></a>为其他的项目做贡</h3><p>如果你的目标是想学习如何与他人一起协作或者了解开源是如何工作的，那么你可以考虑为一个已存在的项目做贡献。开始参与你曾经使用过和喜爱的项目。为项目做贡献就像修改错别字或者更新文档一样简单。</p><p>如果你不知道如何开始做一个贡献者，那么可以阅读我们的<a href="https://liadbiz.github.io/" target="_blank" rel="noopener">Github 开源项目贡献指南</a>。</p><h2 id="发起属于你的开源项目"><a href="#发起属于你的开源项目" class="headerlink" title="发起属于你的开源项目"></a>发起属于你的开源项目</h2><p>如果没有充足的时间来开源你的工作，你可以开发一个想法，一个正在进行的工作或者多年后将被关闭的资源。</p><p>一般来说，当你发现有人对你的工作反馈了一些有建设性的观点后，你应该开源你的项目。</p><p>无论你决定开源你项目的哪个阶段，每个项目都应该包含这些文档：</p><ul><li><a href="https://help.github.com/articles/open-source-licensing/#where-does-the-license-live-on-my-repository" target="_blank" rel="noopener">opensource license</a></li><li><a href="https://help.github.com/articles/create-a-repo/#commit-your-first-change" target="_blank" rel="noopener">README</a></li><li><a href="https://help.github.com/articles/setting-guidelines-for-repository-contributors/" target="_blank" rel="noopener">opensource guidelines</a></li><li><a href="https://github.com/cnbo/open-source-guide/blob/gh-pages/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">code of conduct</a></li></ul><p>作为一名维护者，这些组合将会有助于你表达想法，管理贡献和保护每个人的合法权益（包括你自己的）。他们大大增加了你获得积极经验的机会。</p><p>如果你的项目在 GitHub 上，将这些文件按上面推荐的命名方式放在你的根目录，这样对你的读者会一目了然。</p><h3 id="选择协议"><a href="#选择协议" class="headerlink" title="选择协议"></a>选择协议</h3><p> 开源协议可以保障他人对你的项目进行使用，复制，修改和贡献时不会产生影响。它还保护你免受法律的困扰。<strong>当你发起一个开源项目时必须选择一个协议。</strong></p><p>法律工作很乏味。好消息是你可以在你的仓库中使用一个已经存在的开源协议。这样你只花了很少的时间，但很好的保护了你的工作。</p><p><a href="https://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT</a>, <a href="https://choosealicense.com/licenses/apache-2.0/" target="_blank" rel="noopener">Apache 2.0</a>, and <a href="https://choosealicense.com/licenses/gpl-3.0/" target="_blank" rel="noopener">GPLv3</a> 都是非常流行的开源协议，但是 还有<a href="https://choosealicense.com" target="_blank" rel="noopener">其它的开源协议</a> 可供你选择。</p><p>当你 GitHub 上创建了一个新项目，你可以选择许可协议。包括可以使你的 GitHub 项目开源的协议。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-84c6634ae40c78e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><p>  如果你还有其它的疑问或者与开源项目相关的法律问题，<a href="../legal/">请来这里</a>。</p><h3 id="编写-README"><a href="#编写-README" class="headerlink" title="编写 README"></a>编写 README</h3><p>README 不仅解释了如何使用你的项目，他们还解释了你的项目为什么重要，以及用户可以用它做什么。</p><p>在你的 README 中尽量要回答以下的问题：</p><ul><li>这个项目是做什么的？</li><li>为什么这个项目有用？</li><li>我该如何开始?</li><li>如果我需要使用它，我能从哪里获得更多帮助。</li></ul><p>你可以用 README 去回答其它的问题，像你如何处理贡献，项目的目标是什么，开源协议的相关信息。如果你的项目不想接受贡献，或者你的项目不能用于产品，你就可以将这些写在 README 中。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-ca8b03d39e4c50b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><blockquote><p>一份好的文档意味着会吸引更多的用户，收到更少的支持请求，得到更多的贡献。（···）请记住你的读者们不是你。参与同一个项目的开发者们有着完全不同的经历。</p></blockquote><p>— @limedaring, <a href="https://www.youtube.com/watch?v=8LiV759Bje0&amp;list=PLmV2D6sIiX3U03qc-FPXgLFGFkccCEtfv&amp;index=10" target="_blank" rel="noopener">“Writing So Your Words Are Read (video)”</a></p><p>有时候，人们不会去编写 README。因为他们觉得项目还没有完成或者他们不想要贡献。这些都是非常好的为什么要编写 README 的理由。</p><p>为了获得更多的灵感，可以尝试使用 @18F’s <a href="https://pages.18f.gov/open-source-guide/making-readmes-readable/" target="_blank" rel="noopener">“编写可阅读的 README”</a> 或者 @PurpleBooth’s <a href="https://gist.github.com/PurpleBooth/109311bb0361f32d87a2" target="_blank" rel="noopener">README 模板</a>去编写一份 README。</p><p>当你的根目录中包含 README 文件后，README 就会显示在 GitHub 仓库的首页上。</p><h3 id="编写你的贡献指南"><a href="#编写你的贡献指南" class="headerlink" title="编写你的贡献指南"></a>编写你的贡献指南</h3><p>一份 CONTRIBUTING 文件能否告诉你的粉丝如何参与你的项目。例如，文件中可能会包含如下信息：</p><ul><li>如何报告 bug (尽量使用 <a href="https://github.com/blog/2111-issue-and-pull-request-templates" target="_blank" rel="noopener">issue 和 pull request 目标</a>)</li><li>如何提议一个新特性</li><li>如何建立你的开发环境和运行测试</li></ul><p>另外技术清单和一份 CONTRIBUTING 文件是一个你向贡献者传达你的期望的机会。如：</p><ul><li>你渴望得到什么类型的贡献</li><li>项目的发展路线或者期望</li><li>贡献者应该如何联系你</li></ul><p>使用温暖，友好的语气，并提供具体的建议（如写作文档或做一个网站）可以很大程度上让新来者感到欢迎和兴奋参与。</p><p>例如，<a href="https://github.com/activeadmin/activeadmin/" target="_blank" rel="noopener">Active Admin</a> starts <a href="https://github.com/activeadmin/activeadmin/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">its contributing guide</a> with:</p><blockquote><p>首先，感谢你考虑为 Active Admin 做贡献。就是因为有了像您这样的人让 Active Admin 成为了一个伟大的工具。</p></blockquote><p>在项目的早期，你的 CONTRIBUTING 文件会比较简单。为了做出贡献，你应该总是解释如何报告 bugs 或者文件 issues 和一些技术要求（像测试）。</p><p>过了一段时间，你肯会把频繁出现的提问添加到 CONTRIBUTING 文件中。写下这些信息意味着会有更少的人再重复向你提相同的问题。</p><p>想获得更多书写 CONTRIBUTING 文件的帮助，请查阅 @nayafia’s <a href="https://github.com/nayafia/contributing-template/blob/master/CONTRIBUTING-template.md" target="_blank" rel="noopener">贡献指南模板</a> or @mozilla’s <a href="http://mozillascience.github.io/working-open-workshop/contributing/" target="_blank" rel="noopener">“如何创建 CONTRIBUTING.md”</a>.</p><p> 在 README 中附上 CONTRIBUTING 文件的链接，这样会让跟多的人看到。如果你 <a href="https://help.github.com/articles/setting-guidelines-for-repository-contributors/" target="_blank" rel="noopener">将 CONTRIBUTING 文件放在项目的仓库中</a>,GitHub 会自动链接你的文件当贡献者创建一条issue或者打开一个 pull request。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-525044444f292c8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div><h3 id="制定行为规则"><a href="#制定行为规则" class="headerlink" title="制定行为规则"></a>制定行为规则</h3><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-4326fe8efcfd8e44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div>  <blockquote><p>我们有过这样的经历，我们面临什么是滥用，或者作为一名维护者试图解释为什么有些事必须按一定的方式，或者作为一名用户提出简单的问题。(…)<br>  一份行为规则会变成一份简单的参考和可链接的表示你的团队提出的建设性的话语非常认真的文档。</p></blockquote><p>— @mlynch, <a href="https://medium.com/ionic-and-the-mobile-web/making-open-source-a-happier-place-3b90d254f5f#.v4qhl7t7v" target="_blank" rel="noopener">“Making Open Source a Happier Place”</a></p><p>最后，一份行为规则帮助你为你项目的参与者建立了行为准则。如果你为一个社区或者一家公司发起一个开源项目，它是非常有价值的。一份行为规则授权你促成健康，有建设性的社区行为，这回减轻你作为一名维护者的压力。</p><p>想获得更多信息，请查阅我们的 <a href="https://github.com/cnbo/open-source-guide/blob/gh-pages/CODE_OF_CONDUCT.md" target="_blank" rel="noopener">行为规则指南</a>.</p><p>除了沟通如何期望参与者行为之外，行为准则还倾向于描述这些期望适用于谁，何时应用，以及如果违规发生时该做什么。</p><p>许多开源协议一般也会为行为规则制定标准，所以你可以不用再编写。这份<a href="http://contributor-covenant.org/" target="_blank" rel="noopener">贡献者盟约</a>  是一份被<a href="http://contributor-covenant.org/adopters/" target="_blank" rel="noopener">超过40,000个开源项目</a>所使用的行为规则，包括 Kubernetes, Rails 和 Swift。无论你使用哪个文本，在必要的时候你都应该执行你的行为规则。</p><p>将文本直接粘贴到你仓库中的 CODE_OF_CONDUCT 文件中。将文件放在项目的根目录中方便查找，同时在 README 中添加相应的链接。</p><h2 id="命名和品牌化你的项目"><a href="#命名和品牌化你的项目" class="headerlink" title="命名和品牌化你的项目"></a>命名和品牌化你的项目</h2><p>品牌不仅是一个华丽的 logo 或者易记的项目名。它还关于你如何谈论你的项目，以及你想把信息传递给谁。</p><h3 id="选择正确的名字"><a href="#选择正确的名字" class="headerlink" title="选择正确的名字"></a>选择正确的名字</h3><p>选择一个容易记住，有创意，能表达项目用意的名字。例如：</p><ul><li><a href="https://github.com/getsentry/sentry" target="_blank" rel="noopener">Sentry</a> 监控应用程序的崩溃报告</li><li><a href="https://github.com/macournoyer/thin" target="_blank" rel="noopener">Thin</a> 是一个简单快速的 Ruby web 服务器。</li></ul><p>如果你的项目是基于一个已存在的项目创建，那么使用他们的名字作为你项目名的前缀会帮助你阐述你项目的用途。 (例如 <a href="https://github.com/bitinn/node-fetch" target="_blank" rel="noopener">node-fetch</a>将<code>window.fetch</code> 添加到了 Node.js)。</p><p>考虑阐明所有。押韵虽然有趣，但是记住玩笑不可能转变成其它的文化，或者他人与你有不同的经历。你的一些潜在用户可能是公司员工，你不能让他们在工作中很难解释你的项目！</p><h3 id="避免命名冲突"><a href="#避免命名冲突" class="headerlink" title="避免命名冲突"></a>避免命名冲突</h3><p><a href="http://ivantomic.com/projects/ospnc/" target="_blank" rel="noopener">查看是否有同名的开源项目</a>，尤其是你分享的是同样的语言或者生态系统。如果你的名字与一个已存在的知名的项目有冲突，你会让你的粉丝感到困惑。</p><p>如果你想要一个网站，Twitter 账号或者其他特性来展示你的项目，先确保你能得到你想要的名字。理想情况下，为了美好的未来<a href="https://instantdomainsearch.com/" target="_blank" rel="noopener">现在保留这些名字</a>，即使你现在不想用他们。</p><p>确保你的项目名没有侵权。如果有侵权，可能会有公司要求你的项目下架，或者对你采取法律措施。这样得不偿失。</p><p> 你可以查阅<a href="http://www.wipo.int/branddb/en/" target="_blank" rel="noopener">WIPO全球品牌数据库</a>避免商标冲突。如果你是在公司工作，<a href="../legal/">法律团队会帮你做这件事</a>。</p><p>最后，去谷歌搜索你的项目名。大家会很容易地找到你的项目吗？在搜索结果礼是否有你不想让大家看到的东西？</p><h3 id="你的写作（和代码）如何影响你的品牌"><a href="#你的写作（和代码）如何影响你的品牌" class="headerlink" title="你的写作（和代码）如何影响你的品牌"></a>你的写作（和代码）如何影响你的品牌</h3><p>在项目的整个生命周期中，你需要做很多文字工作：READMEs，教程，社区文档，回复 issues，甚至肯能要处理很多来信和邮件。</p><p>是否是官方文档或者一封普通的邮件，你的书写风格都是你项目品牌的一部分。考虑你可能会拥有粉丝，以及这是你想传达的声音。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-fdb669b8ea0dc87a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></div>   <blockquote><p>我尝试处理每一个细节，包括：处理邮件，展示示例，友好待人，认真处理大家的 issues 以及试图帮助到大家。经过一段时间后，大家可能不再是只问问题，还会帮助我解决其他人的疑问以及给我喜悦，他们模仿我的风格。</p></blockquote><p>— @janl on <a href="https://github.com/apache/couchdb" target="_blank" rel="noopener">CouchDB</a>, <a href="http://writing.jan.io/2015/11/20/sustainable-open-source.html" target="_blank" rel="noopener">“Sustainable Open Source”</a></p><p>使用热情，通俗易懂的语言（如“他们”，即使是指一个人）能够让新来的贡献者感觉项目非常欢迎他们。使用简单的语言，因为你的读者可能英语不是很好。</p><p>除了书写风格外，你的编码风格也是你项目品牌的一部分。 <a href="https://github.com/johnpapa/angular-styleguide" target="_blank" rel="noopener">Angular</a> 和 <a href="http://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener">jQuery</a>是两个项目代码风格严谨的示例和指南。</p><p>当你的项目才开始时，没有必要为项目编写一份风格指南。你可能会发现你喜欢将不同的编码风格融入到项目。但是你应该想到你的书写和编码风格会吸引或者拒绝不同类型的人。项目的早期是你建立你希望看见的先例的机会。</p><h2 id="你的预发布清单"><a href="#你的预发布清单" class="headerlink" title="你的预发布清单"></a>你的预发布清单</h2><p>准备好开源你的项目了吗？有一份帮助检查清单。检查所有内容？你准备开始吧！ <a href="https://help.github.com/articles/making-a-private-repository-public/" target="_blank" rel="noopener">点击 “publish”</a> 以及拍下自己的后背。</p><p><strong>文档</strong></p><ul><li><p>需要为项目指定一个开源协议</p></li><li><p>项目要有基础文档 (README, CONTRIBUTING, CODE_OF_CONDUCT)</p></li><li><p>易记的项目名，指出项目是做什么的，不能和已存在的项目冲突或者商标侵权</p></li><li><p>最新的 issue 队列，组织和标记清除的 issues</p></li></ul><p><strong>代码</strong></p><ul><li><p>项目使用一致的代码风格和明确的功能/方法/可用的名字</p></li><li><p>注释清晰的代码，记录意图和边缘案例</p></li><li><p>在修改历史，issues 或者 pull requests 中没有敏感的信息 (例如 密码或者其他不能公开的信息)</p></li></ul><p><strong>人</strong></p><p>如果你是代表个人：</p><ul><li>你已经告诉了你的法律部门，以及/或者理解了你公司（如果你是某一家公司的员工）的开源政策和 IP</li></ul><p>如果你有一家公司或者组织：</p><ul><li><p>你已经告诉了你的法律部门</p></li><li><p>你有一个宣布和促进项目的营销计划</p></li><li><p>一些人被允许管理社区互动（回复 issues，检查和合并 pull requests）</p></li><li><p>至少有两人管理访问项目</p></li></ul><h2 id="你做到了！"><a href="#你做到了！" class="headerlink" title="你做到了！"></a>你做到了！</h2><h2 id="恭喜你开源了你的首个项目。不论结果如何，对开源社区都是一份礼物。随着每次-commit-comment-和-pull-request，你正在为自己或者他人创造学习和成长的机会。"><a href="#恭喜你开源了你的首个项目。不论结果如何，对开源社区都是一份礼物。随着每次-commit-comment-和-pull-request，你正在为自己或者他人创造学习和成长的机会。" class="headerlink" title="恭喜你开源了你的首个项目。不论结果如何，对开源社区都是一份礼物。随着每次 commit,comment 和 pull request，你正在为自己或者他人创造学习和成长的机会。"></a>恭喜你开源了你的首个项目。不论结果如何，对开源社区都是一份礼物。随着每次 commit,comment 和 pull request，你正在为自己或者他人创造学习和成长的机会。</h2><p>GitHub 开源项目贡献指南中文版：<a href="https://github.com/liadbiz/opensource-contribute-guide-chinise" target="_blank" rel="noopener">https://github.com/liadbiz/opensource-contribute-guide-chinise</a></p><p>英文版：<a href="https://opensource.guide" target="_blank" rel="noopener">https://opensource.guide</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是开源，为什么要开源&quot;&gt;&lt;a href=&quot;#什么是开源，为什么要开源&quot; class=&quot;headerlink&quot; title=&quot;什么是开源，为什么要开源&quot;&gt;&lt;/a&gt;什么是开源，为什么要开源&lt;/h2&gt;&lt;p&gt; 那么你正准备拥抱开源吗？恭喜你，开源世界欣赏你的贡献。接下来让我们聊聊什么是开源，我们为什么要开源。&lt;br&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>学编程，先知规范</title>
    <link href="http://yoursite.com/2018/03/23/%E5%AD%A6%E7%BC%96%E7%A8%8B%EF%BC%8C%E5%85%88%E7%9F%A5%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/03/23/学编程，先知规范/</id>
    <published>2018-03-22T16:19:44.000Z</published>
    <updated>2018-03-23T15:42:00.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我为什么要写这篇博客"><a href="#我为什么要写这篇博客" class="headerlink" title="我为什么要写这篇博客"></a>我为什么要写这篇博客</h2><p>写博客一直是我想去做的事，可是一直没有付诸于行动。虽然看别人的博客很容易，但当自己开始在键盘上敲打的时候，我发现太痛苦了。<br><a id="more"></a></p><p>2017 年 8 月初，和我同一批校招进厂的同学们都已上岗工作了。因为我们的水平不太统一，有的基础好点，有的基础差点，所以老大每周会给我们布置作业，同时也会对我们的作业进行讲评。经过最近两次作业，我发现有部分同学的编码规范有待提高。其实这也可以理解，因为他们之前没有接触过，在学校的时候也没人告诉他们编码要讲究规范。</p><p>我是四月份进的厂，老大安排我维护两个系统。当我看见系统的源码的时候，我的心里有着一万匹叫做曹里的马在奔腾。包含几百行代码的方法随处可见；一个方法有几十个形式参数是正常现象；各种代码风格混杂在一起特别杀马特；在 JSP 里掺杂着 Java、JS、HTML、CSS 代码，有种 56 个民族一家亲的味道；整个系统有一半的逻辑是写在存储过程里的，先喝口水压压惊。</p><p>其实公司老系统代码令人恶心的一个很重要的原因就是上梁不正，下梁歪。由于刚进来的新人也不分不清代码风格的好坏，他们只能学着前人的风格。这样的恶性循环非常可怕。我希望所有学习编程的同学，从开始就养成一个非常好地编码习惯。</p><h2 id="高级程序语言诞生的目的"><a href="#高级程序语言诞生的目的" class="headerlink" title="高级程序语言诞生的目的"></a>高级程序语言诞生的目的</h2><p>我们现在接触到的绝大多数编程语言都是高级语言，例如： C、C++、Java、JavaScript 等。我们在这里不论各种高级程序语言的优劣。</p><p>我们一定要铭记，<strong>用高级语言写出来的代码是给人看的</strong>。我相信高级语言诞生时最宏伟的一个目标就是：<strong>即使没有学过编程的人，他们可以通过类名、方法名和变量名大概知道程序的功能。</strong></p><h2 id="像写好一篇文章一样写代码"><a href="#像写好一篇文章一样写代码" class="headerlink" title="像写好一篇文章一样写代码"></a>像写好一篇文章一样写代码</h2><p>我相信一篇优秀的文章，一定是内容精彩，同时字迹漂亮，文章格式人性化。如果一篇文章的内容非常的不错，但是作者的字及其丑陋，同时文章的格式乱糟糟的。我相信那依然是一篇没人喜欢看的天书。写代码也是同样的道理，即使你的代码所实现的功能非常牛逼，但我们这些凡夫俗子都看不懂，那你的代码也没有多大的价值。</p><p>我们简单看一下写出好代码要掌握哪些规范：</p><ul><li>每个方法所能容纳的代码行数不要超过 30 行，一行代码的字符数量控制在 120 以内。</li><li><strong>一个方法只做一件事</strong>， 就好比我们在家只吃饭，却不做饭。</li><li>在给类名、方法名和变量命名时尽量做到<strong>见名知意</strong>，这会比你们的注释更加给力，因为这时你们的代码自带注释功效。</li><li>类名的每个单词的首字母大写；方法名和变量名的第一个单词的首字母小写，后面单词的首字母大写，这就是传说中的<strong>驼峰命名法</strong>；常量名的所有字母都要大写，并且每个单词间用下划线隔开。</li><li>如果一个方法的形式参数中有太多的基本类型，或者数量超过了 5 个，这时你可以将这些参数封装成一个类。</li><li>当一个方法的逻辑比较复杂的时候，一定要加上注释；给类加上注释，以阐明一个类有哪些功能。</li></ul><h2 id="我们也是自己嘴中的那个坑货"><a href="#我们也是自己嘴中的那个坑货" class="headerlink" title="我们也是自己嘴中的那个坑货"></a>我们也是自己嘴中的那个坑货</h2><p>如果你们觉得养成良好的编码习惯并不重要，或者是很难。那么你们可以时隔一个月、半年或者一年再去看你们之前写过的代码，我相信你们会喷嚏连连，因为你们会骂这是哪个傻*写的，很不幸那个傻坑货就是你们自己。</p><p>不要抱着侥幸的心态，自以为只要是自己写的代码自己就能看懂。其实，你们写的代码并不是你们自己的，随着时间的推移，你们的代码就是别人的啦。为了不让别人(包括你们自己)在背后骂你们，一定要养成良好的编码习惯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我在文章中并没有详细地列举具体地编码规则，因为这些规则已经有人给出来了。阿里巴巴为我们贡献了一套 Java 开发规范，这套规范不仅适用于 Java 开发，同样对其他的编程开发有借鉴意义。这里是<a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8Cv1.2.0.pdf" target="_blank" rel="noopener">阿里巴巴 Java 开发手册的下载地址</a>。[PS： 阿里巴巴的 Java 开发团队是国内最牛逼的]</p><p>最后我给大家推荐一本非常好的书[编写可读代码的艺术]，它会教你如何写出一手漂亮的代码，在书中有各种编程语言的实例。<br><img src="http://upload-images.jianshu.io/upload_images/2180894-ed68deb855061c1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;我为什么要写这篇博客&quot;&gt;&lt;a href=&quot;#我为什么要写这篇博客&quot; class=&quot;headerlink&quot; title=&quot;我为什么要写这篇博客&quot;&gt;&lt;/a&gt;我为什么要写这篇博客&lt;/h2&gt;&lt;p&gt;写博客一直是我想去做的事，可是一直没有付诸于行动。虽然看别人的博客很容易，但当自己开始在键盘上敲打的时候，我发现太痛苦了。&lt;br&gt;
    
    </summary>
    
    
      <category term="编程规范" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记——观察者模式</title>
    <link href="http://yoursite.com/2018/03/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/23/设计模式笔记——观察者模式/</id>
    <published>2018-03-22T16:00:01.000Z</published>
    <updated>2018-03-23T15:42:46.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是观察者模式（Observer-Pattern）"><a href="#什么是观察者模式（Observer-Pattern）" class="headerlink" title="什么是观察者模式（Observer Pattern）"></a>什么是观察者模式（Observer Pattern）</h2><p>观察者模式定义了对象之间的一对多依赖。这样一来，当一个对象状态改变时它的所有依赖者都会收到通知并自动更新。<br><a id="more"></a></p><h2 id="观察者模式的应用"><a href="#观察者模式的应用" class="headerlink" title="观察者模式的应用"></a>观察者模式的应用</h2><p>观察者模式的应用很广泛。例如在 Android 开发时需要对控件注册事件监听，控件属于被观察者，在该控件上所注册的事件属于观察者，当控件发生变化时相应的监听事件会立即做出回应。我想大家都有自己喜欢的微信公众号，其实微信公众号的订阅、推送很好的体现了观察者模式。当我们想及时获得自己喜欢的公号的更新就得先关注它，然后公号有更新时会第一时间通知它的每一位仰慕者。<br>设计模式来源于生活，细细品味生活能够更好的去理解设计模式。</p><h2 id="观察者模式所涉及的-OO-设计原则"><a href="#观察者模式所涉及的-OO-设计原则" class="headerlink" title="观察者模式所涉及的 OO 设计原则"></a>观察者模式所涉及的 OO 设计原则</h2><ul><li>实现交互对象之间的松耦合。<ul><li>何为对象之间的松耦合？松耦合就是两个对象可以交互，但是不太清楚彼此的细节。更通俗一点来说就是你和你的手机就是松耦合的，你可以很轻松的玩耍你的手机（你和手机进行者交互），但你并知道手机内部的实现，手机也更不知道使用者是谁啦。</li></ul></li></ul><ul><li>封装变化。</li><li>多用组合，少用继承。</li><li>针对接口编程，不针对实现编程。</li></ul><h2 id="观察者模式-Java-代码实现及分析"><a href="#观察者模式-Java-代码实现及分析" class="headerlink" title="观察者模式 Java 代码实现及分析"></a>观察者模式 Java 代码实现及分析</h2><ul><li><p>分析</p><ul><li>此 Demo 借用模拟微信公众号简单地实现了观察者模式。</li><li>WeChatPublicNumber 是所有微信公众号的公共接口，所有具体的微信公众号都要实现此接口，CnboJavaDev 就是一个实现此接口的微信公众号（我决定了，我以后的微信公众号就叫此名了，嘻嘻）。WeChatPublicNumber 提供了用户订阅 registerUser(User user) 和取消订阅的方法 removeUser(User user)，还有推送更新的方法 notifyUsers()。</li><li>User 是所有用户的公共接口，此接口提供了更新方法 update() 和文章阅读方法 readArticle() (此方法主要用来测试打印)。Facebook 和 Google 实现了 User 接口。</li><li>TestObserver 用于对此 Demo 的测试。</li></ul></li><li><p>Demo 的 UML 类图</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/2180894-5b0e53cfbc5b6c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="observer demo uml"></p><ul><li><p>WeChatPublicNumber.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WeChatPublicNumber(微信公众号接口)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeChatPublicNumber</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户订阅公号</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户取消订阅</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向所有订阅用户推送更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Article.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文章(别乱想哦)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="comment">//文章的标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文章的作者</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"title:"</span> + title + <span class="string">"; author:"</span> + author;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信用户接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Article article)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readAritcle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CnboJavaDev.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CnboJavaDev 是一个实现了接口 WeChatPublicNumber</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CnboJavaDev</span> <span class="keyword">implements</span> <span class="title">WeChatPublicNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CnboJavaDev</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (users != <span class="keyword">null</span>) &#123;</span><br><span class="line">            users.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (users != <span class="keyword">null</span> &amp;&amp; users.contains(user)) &#123;</span><br><span class="line">            users.remove(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发布文章</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishArticle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向所有订阅者推送文章</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (users == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            user.update(article);</span><br><span class="line">            user.readAritcle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArticle</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.article = article;</span><br><span class="line">        publishArticle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Facebook.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信用户 Facebook</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facebook</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    <span class="keyword">private</span> WeChatPublicNumber weChatPublicNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Facebook</span><span class="params">(WeChatPublicNumber weChatPublicNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weChatPublicNumber = weChatPublicNumber;</span><br><span class="line">        weChatPublicNumber.registerUser(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.article = article;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readAritcle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"facebook read "</span> + article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Google.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信用户 Google</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Google</span> <span class="keyword">implements</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Article article;</span><br><span class="line">    <span class="keyword">private</span> WeChatPublicNumber weChatPublicNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Google</span><span class="params">(WeChatPublicNumber weChatPublicNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weChatPublicNumber = weChatPublicNumber;</span><br><span class="line">        weChatPublicNumber.registerUser(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.article = article;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readAritcle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"google read "</span> + article);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TestObserver.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试观察者模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CnboJavaDev cnboJavaDev = <span class="keyword">new</span> CnboJavaDev();</span><br><span class="line">        <span class="comment">//facebook 和 google 关注了 cnboJavaDev（如果我真被 facebook 和 google</span></span><br><span class="line">        <span class="comment">//关注了，那我会兴奋成神经的，哈哈）</span></span><br><span class="line">        User facebook =  <span class="keyword">new</span> Facebook(cnboJavaDev);</span><br><span class="line">        User google = <span class="keyword">new</span> Google(cnboJavaDev);</span><br><span class="line">        Article article1 = getArticle(<span class="string">"学习笔记之单例设计模式"</span>, <span class="string">"cnbo"</span>);</span><br><span class="line">        <span class="comment">//cnboJavaDev 发布一篇新文章 article1，同时 facebook 和 google</span></span><br><span class="line">        <span class="comment">//都接收到了更新，然后他哥俩有滋有味的读者cnbo的文章。</span></span><br><span class="line">        cnboJavaDev.addArticle(article1);</span><br><span class="line">        Article article2 = getArticle(<span class="string">"学习笔记之策略设计模式"</span>, <span class="string">"cnbo"</span>);</span><br><span class="line">        cnboJavaDev.addArticle(article2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Article <span class="title">getArticle</span><span class="params">(String title, String author)</span> </span>&#123;</span><br><span class="line">        Article article = <span class="keyword">new</span> Article();</span><br><span class="line">        article.setTitle(title);</span><br><span class="line">        article.setAuthor(author);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> article;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是观察者模式（Observer-Pattern）&quot;&gt;&lt;a href=&quot;#什么是观察者模式（Observer-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;什么是观察者模式（Observer Pattern）&quot;&gt;&lt;/a&gt;什么是观察者模式（Observer Pattern）&lt;/h2&gt;&lt;p&gt;观察者模式定义了对象之间的一对多依赖。这样一来，当一个对象状态改变时它的所有依赖者都会收到通知并自动更新。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记——策略设计模式</title>
    <link href="http://yoursite.com/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/22/设计模式笔记——策略设计模式/</id>
    <published>2018-03-22T15:51:11.000Z</published>
    <updated>2018-03-23T15:42:39.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是策略设计模式"><a href="#什么是策略设计模式" class="headerlink" title="什么是策略设计模式"></a>什么是策略设计模式</h2><p>策略设计模式（Strategy Pattern）：定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。<br>其实策略设计模式的核心就是多态（变量的声明是一个超类型，通常是一个抽象类或一个接口，在程序运行时根据情况选择具体要执行的行为。）<br><a id="more"></a></p><h2 id="策略模式的应用"><a href="#策略模式的应用" class="headerlink" title="策略模式的应用"></a>策略模式的应用</h2><ul><li>多个类拥有相同的方法，但具体的实现方式不同，在运行时动态地选择具体要执行的行为。</li><li>需要在不同情况下使用不同策略（算法），或则策略在未来还可能使用其他方式实现。</li><li>对客户隐藏具体策略的实现细节，彼此完全独立。</li></ul><h2 id="策略设计模式涉及的-OO-设计原则"><a href="#策略设计模式涉及的-OO-设计原则" class="headerlink" title="策略设计模式涉及的 OO 设计原则"></a>策略设计模式涉及的 OO 设计原则</h2><ul><li>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。</li><li>针对接口编程，而不是针对实现编程。<ul><li>“ 针对接口编程”真正意思是“针对超类型编程”，关键就在多态。</li></ul></li><li>多用组合，少用继承。</li></ul><h2 id="策略模式-Java-代码实现及分析"><a href="#策略模式-Java-代码实现及分析" class="headerlink" title="策略模式 Java 代码实现及分析"></a>策略模式 Java 代码实现及分析</h2><ul><li>Demo 的 UML 图</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/2180894-cdf74caee23803d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="strategy demo uml"></p><ul><li><p>ProgrammingLanguage.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProgrammingLanguage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">program</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Java.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java</span> <span class="keyword">implements</span> <span class="title">ProgrammingLanguage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">program</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use java programming"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScript</span> <span class="keyword">implements</span> <span class="title">ProgrammingLanguage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">program</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use JavaScript programming"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ObjectC.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectC</span> <span class="keyword">implements</span> <span class="title">ProgrammingLanguage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">program</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"use ObjectC programming"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Programmer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">    ProgrammingLanguage language;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performProgram</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        language.program();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态地指定程序员所使用的编程语言，比如java程序也也需要使用JavaScript编写程序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgrammiingLanguage</span> <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ProgrammingLanguage language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JavaProgrammer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaProgrammer</span> <span class="keyword">extends</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造Java程序员时预指定其所擅长的编程语言</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaProgrammer</span><span class="params">(ProgrammingLanguage language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>JavaScriptProgrammer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptProgrammer</span> <span class="keyword">extends</span> <span class="title">Programmer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在构造JavaScript程序员时预指定其所擅长的编程语言</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaScriptProgrammer</span><span class="params">(ProgrammingLanguage language)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.language = language;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分析<br>此 Demo 简单的实现了策略设计模式。实现的代码我已经在上面贴出，现在我说说代码背后的故事。</p><ul><li>我是如何实现“针对接口编程”的<br>Programmer 是将 performProgram() 的实现委托给接口 ProgrammingLanguage 的，而不是直接委托给 ProgrammingLanguage 的实现类。Programmer 的子类并不用关心 ProgrammingLanguage 的子类是如何实现的，他们之间是松耦合的。</li><li>我是如何实现“封装变化”的<br>Programmer (程序员)使用那一种 language (编程语言)编程是不确定的，是可以动态变化的。所以我将具体的编程方法 program() 封装在了 ProgrammingLanguage 中了，即 Programmer 中performPrograme() 的具体执行是 language.program()。由于 language 是一个接口类型的引用变量，所以 Programmer 的子类在程序运行过程中通过 setProgrammingLanguage 方法动态改变真正要使用的 ProgrammingLanguage 的实现类。</li><li>我是如哦哦和实现“多用组合，少用继承”的<br>由于 Programmer 使用的 language 是动态变化的，所以我在 Programmer 声明了一个接口类型的引用变量 language，而不是选择在 Programmer 的子类中通过实现各种接口获得使用某种编程语言的能力。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是策略设计模式&quot;&gt;&lt;a href=&quot;#什么是策略设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是策略设计模式&quot;&gt;&lt;/a&gt;什么是策略设计模式&lt;/h2&gt;&lt;p&gt;策略设计模式（Strategy Pattern）：定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。&lt;br&gt;其实策略设计模式的核心就是多态（变量的声明是一个超类型，通常是一个抽象类或一个接口，在程序运行时根据情况选择具体要执行的行为。）&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式笔记——单例设计模式</title>
    <link href="http://yoursite.com/2018/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/22/设计模式笔记——单例设计模式/</id>
    <published>2018-03-22T15:22:34.000Z</published>
    <updated>2018-03-23T15:42:15.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是单例模式（Singleton-Pattern）"><a href="#什么是单例模式（Singleton-Pattern）" class="headerlink" title="什么是单例模式（Singleton Pattern）"></a>什么是单例模式（Singleton Pattern）</h2><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。<br><a id="more"></a></p><h2 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h2><p>实现一个单例模式很简单，但我没有想过单例模式有什么用处，直到一次笔试就遇到了问单利模式的应用场景有哪些。</p><p>单例模式的应用场景：线程池（Thread Pool）、缓存（Cache）、对话框、处理偏好设置、注册表（Registry）对象，日志对象，充当打印机、显卡等设备的驱动程序的对象。这类对象只能有一个对象，如果出现多个实例就会导致很多问题，例如：程序的行为异常、资源使用过量、或者是出现不一致的结果。</p><h2 id="Java-代码实现单例"><a href="#Java-代码实现单例" class="headerlink" title="Java 代码实现单例"></a>Java 代码实现单例</h2><p>有四种方式实现单例模式，分别是：饿汉式、懒汉式、双重检查加锁、枚举。接下来我会结合代码介绍这四种方式。</p><ul><li>饿汉式<br>在类被加载时就在类中创建一个唯一实例。<br>优点：线程安全。<br>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式（饿汉式实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个静态的Singleton1实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 singleton = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数以致外部无法创建 Singleton1 实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态方法供外部使用 Singleton1 实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>懒汉式<br>在类首次被使用时才创建处一个全局唯一的实例。<br>缺点：线程不安全。<br>代码实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式（懒汉式实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断 singleton 是否为 null,如果为 null 则创建，否则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>双重检查加锁<br>双重检查加锁是对饿汉式在多线程环境下的升级，保证其线程安全。之所以在代码中是用双检查是为了确保只有在第一次创建实例时才会使用同步，因为同步非常的耗资源。<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式（线程同步实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双重检查加锁</span></span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton3.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举<br>枚举是最优雅的实现单例的方式。饿汉式、懒汉式、双重检查加锁都有一个共同 的问题，那就是都可以通过反射机制调用私有构造器创建实例，这样就不能保证实例是唯一的，这有背单例的使命了。同时枚举也是线程安全的。<br>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单例模式（枚举实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton4 &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>是不是觉得枚举实现单例的代码太简单了，我想说的是，枚举就是这么任性，就是要这么简单。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li>为什么全局变量比单例模式差<br>全局变量基本上是对对象的静态引用。在这样的情况下使用全局变量非常耗资源。同时使用全局变量不能确保只有一个实例。</li><li>单例类能否被继承<br>无论是枚举实现还是非枚举实现，单例类都不能被继承。<br>非枚举方式实现的单例类由于构造器是私有的，因而不能被继承。</li><li>单例是否违背例 OO 设计<br>答案是肯定的。单例类不只负责管理自己的实例，同时还在应用程序中担任角色。虽然单例违背例 OO 设计，但它让整体设计变得简单，这是可以谅解的。</li><li>有多个类加载器的情况下如何处理单例类<br>自行指定类加载器，并指定同一个类加载器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是单例模式（Singleton-Pattern）&quot;&gt;&lt;a href=&quot;#什么是单例模式（Singleton-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;什么是单例模式（Singleton Pattern）&quot;&gt;&lt;/a&gt;什么是单例模式（Singleton Pattern）&lt;/h2&gt;&lt;p&gt;单例模式确保一个类只有一个实例，并提供一个全局访问点。&lt;br&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>小白和老妈聊计算机组成原理</title>
    <link href="http://yoursite.com/2018/03/21/%E5%B0%8F%E7%99%BD%E5%92%8C%E8%80%81%E5%A6%88%E8%81%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/21/小白和老妈聊计算机组成原理/</id>
    <published>2018-03-21T15:56:20.000Z</published>
    <updated>2018-03-23T15:41:40.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>这段时间看完了 <strong>《编码的奥秘》</strong>和 <strong>《程序是怎样跑起来的》</strong>这两本书，我想尝试用大白话聊聊计算机组成原理。在 <strong>《程序是怎样跑起来的》</strong> 这本书中，有几个故事片段：<strong>向小学生讲解 CPU 和二进制、向沉迷游戏的中学生讲解内存和磁盘、向喜欢玩手机的女高中生讲解操作系统的作用、向邻居老太太说明显示器和电视机的不同</strong>。我觉得作者的想法太棒了，将晦涩难懂的计算机知识以通俗的方式讲解给不太了解计算机知识的人，这样不仅有利于我们自己对计算机的理解，同时也能让更多的人了解计算机知识。<br><a id="more"></a></p><p> 在个人计算机和智能手机泛滥的现在，依然有很多人不了解计算机，即使他们每天都在使用他们。像我这样计算机专业的学生要不是恶补计算机组成原理，可能对计算机也是个模糊的概念。然后就是有很多人并不清楚<strong>程序员</strong>的工作到底是什么，尤其是我们的上一辈。受到 <strong>《程序是怎样跑起来的》</strong> 一书的启发，我将模拟和老妈的对话来聊计算机组成原理。我老妈没有接受过多少教育，我将会用生活中的一些普通事务来给她讲解计算机。计算机的出现是为了解决生活中的问题，让机器去做本该人去做的事，那么，用生活中的事务来类比计算机的组成和运行原理应该是行得通的。</p><p><strong>小白</strong>是我一同学以牙还牙给我的外号，我觉得这外号太赞了，因为我在技术上是个小白。</p></blockquote><h2 id="小白和老妈的聊天记录"><a href="#小白和老妈的聊天记录" class="headerlink" title="小白和老妈的聊天记录"></a>小白和老妈的聊天记录</h2><blockquote><p><strong>老妈:</strong> 儿子，你能给老妈讲讲你的工作具体是干什么的吗？  </p><p><strong>小白:</strong> 妈，您也这太难为我了吧，即使给您了说了，您也不懂啊！  </p><p><strong>老妈:</strong> 儿子，你不说，怎么就知道我不懂呢？如果你不能将自己所学的知识讲给别人听，你又怎么知道自己是否真正理解了学习过的知识。</p><p><strong>小白:</strong> 还是老妈您厉害，说的太有道理了。容我先想想如何给您介绍我的工作。</p><p><strong>旁白:</strong> 老妈不仅不会计算机，也没上过几年学，要向她介绍程序员的工作和计算机，这任务难度可不小啊。但是再难，也得想办法让老妈听懂，毕竟我出生的时候既不会说话，也不会走路，因为老妈的细心教导，我才学会了说话、走路。</p><p>思考中……</p><p><strong>小白:</strong> 老妈，我的工作是和计算机打交道，您知道您每天都在使用计算机吗？</p><p><strong>老妈:</strong> 不对啊，你在学校学的不是电脑吗，怎么是和计算器打交道呢？</p><p><strong>小白:</strong> 哈哈，您真幽默！我来慢慢给您解释。我们平常生活中所说的计算机，一般是指<strong>计算器</strong>，用来在购买商品时计算价钱用的。而我现在说的计算机不是用来做简单算术的计算器，我所说的计算机就是您给我买的电脑。严格来说，您给我买的<strong>电脑</strong>叫做<strong>个人计算机</strong>，是计算机的一种。电脑是我工作的工具。   </p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-5abc881688df65c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>计算器</center></div><br><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-eb67b4a3ba53b6b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>计算机</center></div>     <p><strong>老妈:</strong> 你这信息量有点大，你老妈我有点懵。你能讲讲那计算器，哦，不对，就是你那计算机到底是个什么玩意，你又是如何用它来工作的，你的工作内容又是什么？</p><p><strong>小白:</strong> 老妈，您先别急，容我给您细细道来。为了不让您犯糊涂，接下来我会将计算机说成电脑。<br>您是否记得，家里每次卖棉花的时候，老爸都会将每一包棉花的重量记录在本子上，最后一通加减乘除计算出棉花值多少钱，与老爸一起计算价钱的还有收棉花的商人，不过商人使用的是计算器。老爸需要知道加减乘除是怎么回事，他才能计算出最终的结果，而商人只需要将数据输入到计算器中，然后计算器就会告诉商人正确的结果。在这个过程中，商人并不需要自己会加减乘除，他只需要学会使用计算器就好了。通过这个故事您是否发现，计算器做了一部分本应该是人该做的事，而我们只要把数据给计算器，计算器就会返回一个结果给人，我们并不需要关心计算器是如何做到的。您是不是觉得计算器很聪明呢？</p><p><strong>老妈:</strong> 按你这么说，计算器确实很聪明。但是，儿子，你想通过这个故事说明什么呢？</p><p><strong>小白:</strong> 其实计算器本来并不知道如何进行加减乘除操作的，是我们告诉计算器如何进行加减乘除的。我想您现在应该对我的工作有点模糊的概念了，<strong>我的工作就是告诉计算器和电脑这些机器如何帮助我们人类做事</strong>。</p><p><strong>老妈:</strong> 那你又是如何教它们做事的呢？</p><p><strong>小白:</strong> 这是个好问题，告诉您一个秘密，我会和电脑说话，哈哈。。。</p><p><strong>老妈:</strong> 你这臭小子，净瞎扯，那你和电脑说个话给我看看。</p><p><strong>小白:</strong> 我没瞎扯，我确实会和电脑说话，只是不能像我和您这样人类的语言非常流畅地聊天。电脑要听懂我的话要经历一个非常复杂的过程。要想把这个复杂的过程说清楚，可能会很难，您还想继续听我瞎扯下去吗？</p><p><strong>老妈:</strong> 你少废话，这好不容易听到有意思的地方了，你就想吊我胃口然后跑路，想得美，继续你的表演。</p><p><strong>小白:</strong> 好的，小的遵命。我想告诉您，电脑和我们人一样，它们也有自己的语言。</p><p><strong>老妈:</strong> 哇，这么神奇！那它们的语言是什么呢？</p><p><strong>小白:</strong> 它们的语言就是 <strong>0</strong> 和 <strong>1</strong>，您如果要和它们聊天，那么就是您吧啦吧啦地说一连串的 0 和 1，然后它们也用一连串的 0 和 1 回应您。估计您现在又在犯愁了。</p><p><strong>老妈:</strong> 确实犯愁，那它们是如何用 <strong>0</strong> 和 <strong>1</strong> 来传达信息的？</p><p><strong>小白:</strong> 不愧是我亲妈，问的问题越来越有深度了。您可不要小看这简单的 <strong>0</strong> 和 <strong>1</strong>，它们可是很强大的。我们先从硬币说起，一枚硬币有两面，一面是有花的，一面是有字的。那么电脑是如何形容硬币的两面的呢？您要记住，电脑只会说 0 和 1。</p><p><strong>老妈:</strong> 我是这么想的，也不知道对不对，电脑应该是用 0 表示硬币带花的一面，用 1 表示带字的一面。</p><p><strong>小白:</strong> 此处应有掌声，老妈简直太棒了。那我们现在来一个稍微复杂点的，您不是经常找好友们打打麻将吗，你们需要用<strong>骰子</strong>来确定从哪里开始起牌。那我们现在就要用这<strong>骰子</strong>来搞事情。骰子有六面，它们分别表示 1、2、3、4、5、6 这六个数字，现在让我们来想想电脑是如何用 0 和 1 来表示这六个数的呢？</p><p><strong>老妈:</strong> 这我就猜不到了。</p><p><strong>小白:</strong> 没事，让我来为您揭开谜底，咱们先看下面这张表格。</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-456a1099ed8ef81e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>电脑是如何表示骰子的六个面的</center></div><br>是不是很神奇，电脑竟然能用 0 和 1 的组合来表示骰子的六个面。<br><br><strong>老妈:</strong> 难道电脑只能用 0 和 1 来表示 6 以内的这些简单数字吗？<br><br><strong>小白:</strong> 当然不只这些简单的数字啦，如果想要表示更大的数字，就需要更长的 0 和 1 的组合。我们现在没有必要去深究如何用 0 和 1 表示更复杂的数字，因为这已经超出了您所能承受的范围，您只要知道电脑能用 0 和 1 来表示我们生活中的数字就行了。<br><br><strong>老妈:</strong> 难道电脑就只能用 0 和 1 表示数字吗？<br><br><strong>小白:</strong> 那肯定不是啦，让我再来为您举个例子。<br><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-ccb753377b6eadf2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>用 0 和 1 给小朋友起名字</center></div><br>您看，上图的表格张有四个小朋友的名字，现在我用 0 和 1 给他们分别起了一个新名字，让电脑能够认识这些可爱的小家伙们。<br>通过这三个例子，我们可以发现，我们可以用 0 和 1 表达任何信息。关于 0 和 1 的故事还有更加复杂的，我们就不再追究了，重要的是我们知道 0 和 1 是电脑的语言。<br><br>『<strong>注: 如果大家想了解更多 0 和 1 的故事，可以细细品尝 《编码的奥秘》这本书。</strong>』<br><br><strong>老妈:</strong> 儿子，你能讲讲为什么电脑的语言是 0 和 1 吗？<br><br><strong>小白:</strong> 妈，咱先来个抱抱，您的问题越来越有深度了，我当然乐意给您讲讲为什么了。<br>您知道为什么电脑叫电脑吗？<br><br><strong>老妈:</strong> 不知道。。。<br><br><strong>小白:</strong> 因为电脑确实有一个大脑，让我们先看看它长啥样。<br>![计算机的大脑——西皮柚 (CPU)]<div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-924254643c2676c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>计算机的大脑——西皮柚(CPU)</center></div>         <p><strong>老妈:</strong> 这就是电脑的大脑了呢？可别糊弄我哦。</p><p><strong>小白:</strong> 哪敢糊弄您啊，这确实就是电脑的大脑了。您可别看它长得如此秀气，它的内部结构复杂到您无法想象，而且功能非常强大。</p><p><strong>老妈:</strong> 那怎么称呼它呢？</p><p><strong>小白:</strong> 它叫<strong>西皮柚 ( CPU——Central Processing Unit)</strong>，是不是听着像是某种柚子的名字。</p><p><strong>老妈:</strong> 这名字有点意思。你这说了老半天，似乎还没进入正题啊。</p><p><strong>小白:</strong> 别急嘛，咱得一个萝卜一个坑，循序渐进地深入。您别听我说它内部非常的复杂，就觉得它深不可测了，再高的大楼都是由一块块的砖头堆积起来的，其实西皮柚的内部是由无数个<strong>开关(晶体管)</strong>组成的。</p><p><strong>老妈:</strong> 由开关组成的？</p><p><strong>小白:</strong> 是的，就是由开关组成的。您完全可以把它理解成我们家里点灯的开关，现在是不是觉得很神奇呢？</p><p><strong>老妈:</strong> 确实很神奇，太意外了。</p><p><strong>小白:</strong> 我们现在已经接触到真相了。我们在使用开关控制灯的时候，永远只有两种状态，要么是关灯，要么是开灯，觉不会有第三种情况。</p><p><strong>老妈:</strong> 这不就和硬币的正反面是一个道理么。</p><p><strong>小白:</strong> 是的。之所以电脑的语言是 0 和 1，就是因为西皮柚是由开关组成的，一个开关永远只有两种状态，我们可以用 0 和 1 来表示开关的状态。虽然一个开关只有两种状态，但很多个开关连接起来就可以有很多状态了，也就是可以组成很多 0 和 1 了，也就意味着可以表示很多复杂的信息了。</p><p><strong>老妈:</strong> 既然我们现在知道电脑的语言是 0 和 1 了，那你是如何与它交流的呢？</p><p><strong>小白:</strong> 因为我和电脑之间用的是两种不同的语言，所以这个交流的过程非常曲折。让我们先来看看生活中的电脑是由那几部分组成的。</p><p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-639031ceffe06963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>笔记本</center></div></p><p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-97ce560581f8b437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>台式电脑</center></div><br>上面两张图是我们生活中所能接触到的电脑，左图我们称之为笔记本，右图我们称之为台式电脑，从图中我们可以看出，它们都有一个键盘、一个鼠标和一个显示器。</p><p><strong>老妈:</strong> 右图中不是还有一个大黑箱子吗，那个黑箱子是什么东西，为什么笔记本没有呢？</p><p><strong>小白：</strong> 那个大黑箱子才是真正的宝贝啊，值钱的东西可都在里面啊，西皮柚可就藏在那里面，那些什么键盘啊，鼠标都是些配角。其实笔记本也有那黑箱子，只是它体积变小了，而且位置稍微有点不起眼，笔记本的黑箱子就在键盘的底下。</p><p><strong>老妈:</strong> 既然显示器和键盘是配角，那他们的作用是什么呢？</p><p><strong>小白:</strong> 键盘是一个输入设备，我们通过键盘将我的话和数据告诉电脑；显示器是一个输出设备，我们可以通过显示器看到电脑给我们反馈的结果。输入和输出设备还有很多，比如话筒 (输入设备)、音响 (输出设备)等等。<br>我们接着来看一下我和电脑交流的简要过程图。<br> <div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-ae6d9ca19cf40628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>小白和电脑交流的过程</center></div><br>通过上面的图，我们可以发现，其实我和电脑交流，本质上是和它的西皮柚交流。  </p><p><strong>老妈:</strong> 怎么图中还有一个翻译官？</p><p><strong>小白:</strong> 翻译官可是我大爷啊，要是没它，我和电脑就只能大眼瞪小眼了。我说的是为计算机定做的英语，也就是我常说的编程语言，电脑说的是 0 和 1，这压根没法交流。</p><p><strong>老妈:</strong> 那你就不能去学习用 0 和 1 说话么？</p><p><strong>小白:</strong> 您也知道，您儿子没啥别的特点，就是懒。电脑那 0 和 1 的语言太难了，对于我来说和天书没差别。我们这世界很有意思的一个地方就是：除了有像我这种非常懒得人，也有非常勤劳和充满智慧的人。有一群被我试做为神的人，他们不仅精通编程语言，还精通电脑的0 和 1，他们可以用 0 和 1 愉快地和电脑聊天。因为那些人毕竟是少数，所以他们为了方便跟多的人于电脑进行交流，他们就制作了一个翻译官，将其放置在电脑的内部，这个翻译官能够将编程语言翻译为电脑能够理解的 0 和 1。</p><p><strong>老妈:</strong> 你这臭小子，多花点时间跟那些大牛们学学，别每天只知道吃喝玩乐。那我看见你每次用电脑和同学聊天或者是看电影，也没输入什么编程语言啊。</p><p><strong>小白:</strong> 您这各个问题都能命中要害，真棒！老妈，我在工作中是教电脑如何做事，而在生活中我是使唤电脑做事。如果我每次使唤电脑做事的时候，我还要去教电脑如何做事，估计会有好多人会和我上街去乞讨，有些人会砸了电脑然后去做些不理智的事。</p><p><strong>老妈:</strong> 按你这么说，电脑它能记住你教它做的事吗？</p><p><strong>小白:</strong> 那必须的啊，不然为啥它叫电脑呢，记忆功能那是必须有的。</p><p><strong>老妈:</strong> 你是说那个什么西皮柚还有记忆功能？</p><p><strong>小白:</strong> 关于记忆这事，那可不敢劳烦它老人家，它是只要没电了，就会停止工作，然后忘掉所有的事情。</p><p><strong>老妈:</strong> 你这小子，葫芦里还有啥宝贝，别藏着掖着了。</p><p><strong>小白:</strong> 无图无真相，我们来看看电脑的那个黑箱子除了西皮柚子还有些啥玩意儿。  </p><p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-5f943c25bbfcc0a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>电脑的关键组成部分</center></div><br><strong>老妈:</strong> 这图里面都是些啥东西啊？</p><p><strong>小白:</strong> 我之前不是说电脑能记住我教它做的事么，电脑很聪明，它把学会的事情都记忆在那个叫做<strong>硬盘</strong>的设备中了。当我告诉电脑我要听歌时，电脑就从硬盘那找播放音乐的技能。在硬盘中不仅可以存储电脑学会的各种厉害的技能，还可以存储我收藏的视频、音乐、图片和书籍等等，它可以存储很多东西。说白了，硬盘就是电脑中的一个仓库。</p><p><strong>老妈:</strong> 既然硬盘是仓库，那图中其它几个东东又是干什么的呢？</p><p><strong>小白:</strong> 其实内存、西皮柚缓存和寄存器也是用来存储东西的。</p><p><strong>老妈:</strong> 为什么需要这么多存储设备呢？它们之间有什么差别吗？</p><p><strong>小白:</strong> 因为西皮柚在做一件事情的时候，它不能直接从硬盘那个家伙那里直接获取数据。</p><p><strong>老妈:</strong> 为什么呢？</p><p><strong>小白:</strong> 想要知道为什么，您先得回答我几个问题。</p><p><strong>老妈:</strong> 好，继续你的表演。</p><p><strong>小白:</strong> 您平时买东西是用什么付款？</p><p><strong>老妈:</strong> 晕，当然是钱啊！</p><p><strong>小白:</strong> 我的意思是，您出门在外，钱是放在哪里的。</p><p><strong>老妈:</strong> 钱包啊。</p><p><strong>小白:</strong> 您每天出门前似乎都会检查下钱包是否弹药充足，对吧。那您是如何保证每天出门时钱包都是元气满满的呢？</p><p><strong>老妈:</strong> 家里有保险柜啊，没钱了就从那拿就行了。</p><p><strong>小白:</strong> 原来家里还有保险柜啊，那密码是多少？</p><p><strong>老妈:</strong> 你这臭小子绕来绕去，就是为了打听这事啊，没门儿！</p><p><strong>小白:</strong> 您老放心，我老板每个月都会按时给我发生活费，压根不会对您的小金库有什么非分之想。</p><p><strong>老妈:</strong> 那就好，继续说正事。</p><p><strong>小白:</strong> 那如果家里的保险柜快断粮了呢？</p><p><strong>老妈:</strong> 那当然是赶快去离得最近的取款机取钱啊。</p><p><strong>小白:</strong> 那取款机没钱了怎么办？</p><p><strong>老妈:</strong> 那必须马上告知银行，让他们从金库运点钱过来让取款机吃饱喝足。你这问了半天，想表达什么呢？</p><p><strong>小白:</strong> 其实就在咱俩这一唱一和的过程中，我已经给您大概解释了下硬盘、内存、西皮柚缓存和寄存器它们之间的关系。</p><p><strong>老妈:</strong> 有吗？</p><p><strong>小白:</strong> 必须的啊。我们先来看个表格。<br>!<div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-2855837ff90f7778.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>内存设备和存钱设备的对应关系</center></div><br><strong>老妈:</strong> 我没看懂你这表格表达的意思。</p><p><strong>小白:</strong> 您购物需要钱，这钱来自于您的钱包，而您钱包中的钱来自于家里的保险柜，保险柜中的钱来自于取款机，取款机中的钱来于银行的金库。电脑给我播放视频也是同样的道理，首先西皮柚会从寄存器获取相关的数据，而寄存器中的数据来自于西皮柚缓存，西皮柚缓存中的数据来自于内存，内存中的数据来自硬盘。</p><p><strong>老妈:</strong> 我还是没想明白为什么需要这么复杂的过程。</p><p><strong>小白:</strong> 之所以会有这么多中间过程，都是因为有个时间效率在从中作梗。<br><strong>老妈:</strong> 怎么说。</p><p><strong>小白:</strong> 您为什么在购物的时候，不是直接从银行的金库取钱来付款？</p><p><strong>老妈:</strong> 要是我买个东西，还得先走个几天几夜去银行金库取钱，那还得了。嗯，我似乎明白了点什么。</p><p><strong>小白:</strong> 其实我说了半天，就是想说，硬盘虽然能装很多东西，但别人从那取数据非常的耗时，而西皮柚做事又麻利，效率非常之高，您要是让西皮柚直接从硬盘那取数据的话，那西皮柚半天都做不完一件事。<br>所以，要想充分利用西皮柚做事的效率，我们就为西皮柚准备了寄存器，寄存器存取数据的速度非常之快，深受西皮柚的喜爱，所以西皮柚是直接从寄存器获取数据。但是了，人无完人，金无足赤，寄存器虽然读取数据的速度很快，但它是以牺牲存储容量为代价的。所以，我们又为寄存器准备了西皮柚缓存，西皮柚缓存读取数据的速度要比寄存器慢点，但它的存储容量要比寄存器大。毕竟西皮柚缓存的容量也是有限的，还是不能满足需求，那么我们又在西皮柚缓存和硬盘之间加了一个内存，内存的读取速度和存储容量刚好介于西皮柚缓存和硬盘之间。</p><p><strong>老妈:</strong> 儿子，你说了这么一大堆，是不是想表达为了<strong>匹配西皮柚的工作效率</strong>，需要对西皮柚的数据做一个<strong>缓存</strong>工作？</p><p><strong>小白:</strong> 哇塞，我老妈简直太棒了，您这解释简直太棒了，我要为您打 call。虽然您现在知道为什么电脑中为什么会有各种存储设备了，但我们还需要用一张图来对这些存储设备做个简单的总结。轻松一刻，请看图：  </p><p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-fb91fa5e05d81982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>存储设备比较</center></div><br>在图中我们可以看到存储容量越大的，读取数据的速度越慢，同时价格也越便宜。还有一点我没有告诉您，在图中只有硬盘在断电后，保存在硬盘中的数据依然会存在，寄存器、西皮柚缓存和内存断电后数据就会丢失。现在关于存储设备就先聊到这。</p><p><strong>老妈:</strong> 既然你说完了存储设备，那西皮柚中的<strong>控制器</strong>和<strong>运算器</strong>是干什么的呢？</p><p><strong>小白:</strong></p><ul><li><strong>控制器</strong>，顾名思义它是起控制作用的。控制器负责将西皮柚缓存中的数据读入到寄存器，同时它还负责控制各种输出、输入设备。比如我现在在用键盘打字，同时我能在显示器上看见我敲打出来的字，这些操作都是由控制器在背后完成。</li><li>在寄存器中存储有<strong>指令</strong>和<strong>数据</strong>，<strong>运算器</strong> 会根据寄存器中的指令对相应的数据进行运算。</li></ul><p><strong>老妈:</strong> 控制器我还能勉强理解，但这<strong>运算器、指令和数据</strong>令我头痛。</p><p><strong>小白:</strong> 头痛就对了，因为我正要准备给您讲电脑是如何工作的，其实也就是西皮柚是如何工作的。</p><p><strong>老妈:</strong> 真棒！</p><p><strong>小白:</strong> 您想知道电脑的硬盘里到底存的是什么吗？</p><p><strong>老妈:</strong> 那当然啊！</p><p><strong>小白:</strong> 我们可以把存储在硬盘的数据可以分为<strong>软件</strong>和<strong>可被软件操作的数据</strong>。</p><p><strong>老妈:</strong> 你这里说的<strong>软件</strong>是什么？</p><p><strong>小白:</strong> 软件就是我每次播放视频、播放音乐和朋友聊天的那些工具。</p><p><strong>老妈:</strong> 那些叫做软件的家伙为什么能播放视频呢？</p><p><strong>小白:</strong> 您还记得我会教电脑做事吗？</p><p><strong>老妈:</strong> 当然记得。</p><p><strong>小白:</strong> 我们做每一件事都是有方法的，我将这些方法包装起来放在电脑中，然后经过一系列的复杂操作，被包裹起来的方法最终就成了软件。</p><p><strong>老妈:</strong> 那<strong>可供软件操作的数据</strong>是什么呢？</p><p><strong>小白:</strong> 比如我现在要用电脑看视频和图片，这些图片和视频就是可供软件操作的数据。</p><p><strong>老妈:</strong> 我想我已经理解了<strong>软件</strong>和<strong>可供软件操作的数据</strong>，但不知道我理解的对不对。</p><p><strong>小白:</strong> 真厉害，您先别管对不对，只管把您的想法大胆地说出来。</p><p><strong>老妈:</strong> 好的！我感觉软件和做红烧肉很像，我做红烧肉的过程和技巧就相当于一个软件，同时五花肉、糖和酱油等原材料就是被软件操作的数据。</p><p><strong>小白:</strong> 我想吃颗炫迈，不停地为您打 call。</p><p><strong>老妈:</strong> 低调，低调！</p><p><strong>小白:</strong> 哈哈！言归正传，既然我们已经知道软件是啥玩意儿了，那我们现在就要解释指令了。我们刚刚把软件解释成了做一件事的方法，现在我们要换一种说法了，软件是一组指令的集合。</p><p><strong>老妈:</strong> 儿子，你这葫芦里又是卖的啥药？</p><p><strong>小白:</strong> 不急，我们继续拿红烧肉说事。我们先来通过一个流程图看看我们是如何烹制一道美味的红烧肉的。  </p><p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/2180894-13d176f0c1ec22f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><center>红烧肉制作路程</center></div><br>如图中所示，购买五花肉就是一个购买指令；判断红烧肉是否已经熟的动作就是一个判断指令；如果红烧肉已经熟了，就将其装盘，这就涉及到一个跳转的动作，也就是跳转指令。<br>现在我们可以总结下西皮柚到底是如何做事的了：<strong>西皮柚通过寄存器、西皮柚缓存和内存硬盘中获取指令和数据，然后通过运算器使用指令对相应的数据进行运算。</strong></p><p><strong>老妈:</strong> 聊了半天，我总算是明白了你们程序员的工作了。你们程序员就是将生活中需要大量人力做的事情抽象出来，做成一个个的程序，然后我们给这些程序数据，最后得到我们想要的结果。</p><p><strong>小白:</strong> 是这么回事。您还有什么问题吗？</p><p><strong>老妈:</strong> 我发现你在用电脑看视频的时候，同时还能和朋友们聊天，这是怎么回事？</p><p><strong>小白:</strong> 老妈您这观察的也忒仔细了。其实，电脑能同时做多件事，多亏了强大的西皮柚。</p><p><strong>老妈:</strong> 西皮柚能够同时处理多件事吗？</p><p><strong>小白:</strong> 其实一个西皮柚在一个时间点也只能做一件事，只是它执行的速度非常快，快到它一会儿执行播放视频的程序，一会执行聊天的程序，让人觉得它们是在同时运行的。</p><p><strong>小白:</strong> 老妈，我们下次再聊，我得看书充电了，我得保证有足够的知识量来满足您的好奇心。嘻嘻。。。</p><p><strong>老妈:</strong> 木问题，加油！</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>断断续续地终于胡编乱造完了，感谢大家能花时间读我这么多废话！因为对计算机的底层原理理解还不够深入，同时文字功底也一般，若有问题，还望大家指出，谢谢大家！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《程序是怎么跑起来的》 【日】 矢泽久雄</li><li>《编码的奥秘》 Charles Petzold</li><li>刘欣老师的公众号《码农翻身》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这段时间看完了 &lt;strong&gt;《编码的奥秘》&lt;/strong&gt;和 &lt;strong&gt;《程序是怎样跑起来的》&lt;/strong&gt;这两本书，我想尝试用大白话聊聊计算机组成原理。在 &lt;strong&gt;《程序是怎样跑起来的》&lt;/strong&gt; 这本书中，有几个故事片段：&lt;strong&gt;向小学生讲解 CPU 和二进制、向沉迷游戏的中学生讲解内存和磁盘、向喜欢玩手机的女高中生讲解操作系统的作用、向邻居老太太说明显示器和电视机的不同&lt;/strong&gt;。我觉得作者的想法太棒了，将晦涩难懂的计算机知识以通俗的方式讲解给不太了解计算机知识的人，这样不仅有利于我们自己对计算机的理解，同时也能让更多的人了解计算机知识。&lt;br&gt;
    
    </summary>
    
    
      <category term="计算机组成原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
